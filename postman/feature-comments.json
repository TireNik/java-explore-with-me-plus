{
  "info": {
    "_postman_id": "c7d8e9f1-1234-5678-9abc-def012345678",
    "name": "Тест API комментариев",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "39518316"
  },
  "item": [
    {
      "name": "Комментарии администратора",
      "item": [
        {
          "name": "Получить комментарий по ID (Админ)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        const comment = await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Тестовый комментарий' });",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "        pm.collectionVariables.set('eventId', event.id);",
                  "        pm.collectionVariables.set('commentId', comment.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Комментарий должен содержать поля: id, authorId, eventId, created, message', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('authorId');",
                  "    pm.expect(response).to.have.property('eventId');",
                  "    pm.expect(response).to.have.property('created');",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Данные в ответе должны соответствовать созданному комментарию', function () {",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('commentId'));",
                  "    pm.expect(response.authorId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.eventId).to.equal(pm.collectionVariables.get('eventId'));",
                  "    pm.expect(response.message).to.equal('Тестовый комментарий');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "comments", "{{commentId}}"]
            },
            "description": "Получение комментария по ID администратором."
          },
          "response": []
        },
        {
          "name": "Удалить комментарий (Админ)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        const comment = await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Удаляемый комментарий' });",
                  "        pm.collectionVariables.set('commentId', comment.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "    pm.response.to.not.have.body;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/admin/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["admin", "comments", "{{commentId}}"]
            },
            "description": "Удаление комментария администратором."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Приватные комментарии",
      "item": [
        {
          "name": "Получить все комментарии пользователя",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Комментарий 1' });",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Ответ должен быть массивом', function () {",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Каждый комментарий должен содержать нужные поля', function () {",
                  "    response.forEach(comment => {",
                  "        pm.expect(comment).to.have.property('id');",
                  "        pm.expect(comment).to.have.property('authorId');",
                  "        pm.expect(comment).to.have.property('eventId');",
                  "        pm.expect(comment).to.have.property('created');",
                  "        pm.expect(comment).to.have.property('message');",
                  "    });",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/comments",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "comments"]
            },
            "description": "Получение всех комментариев пользователя."
          },
          "response": []
        },
        {
          "name": "Получить комментарий по ID (Приватный)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        const comment = await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Тестовый комментарий' });",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "        pm.collectionVariables.set('commentId', comment.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Комментарий должен содержать нужные поля', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('authorId');",
                  "    pm.expect(response).to.have.property('eventId');",
                  "    pm.expect(response).to.have.property('created');",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Данные должны соответствовать запросу', function () {",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('commentId'));",
                  "    pm.expect(response.authorId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.message).to.equal('Тестовый комментарий');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "comments", "{{commentId}}"]
            },
            "description": "Получение комментария по ID для пользователя."
          },
          "response": []
        },
        {
          "name": "Создать комментарий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "        pm.collectionVariables.set('eventId', event.id);",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify({ message: 'Новый комментарий' }),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 201 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(201);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Комментарий должен содержать нужные поля', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('authorId');",
                  "    pm.expect(response).to.have.property('eventId');",
                  "    pm.expect(response).to.have.property('created');",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Данные должны соответствовать запросу', function () {",
                  "    pm.expect(response.authorId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.eventId).to.equal(pm.collectionVariables.get('eventId'));",
                  "    pm.expect(response.message).to.equal('Новый комментарий');",
                  "    pm.collectionVariables.set('commentId', response.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/comments/{{eventId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "comments", "{{eventId}}"]
            },
            "description": "Создание нового комментария. Событие должно быть опубликовано."
          },
          "response": []
        },
        {
          "name": "Обновить комментарий",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        const comment = await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Старый комментарий' });",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "        pm.collectionVariables.set('commentId', comment.id);",
                  "        pm.request.body.update({",
                  "            mode: 'raw',",
                  "            raw: JSON.stringify({ message: 'Обновленный комментарий' }),",
                  "            options: { raw: { language: 'json' } }",
                  "        });",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Комментарий должен содержать нужные поля', function () {",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('authorId');",
                  "    pm.expect(response).to.have.property('eventId');",
                  "    pm.expect(response).to.have.property('created');",
                  "    pm.expect(response).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Данные должны соответствовать обновлению', function () {",
                  "    pm.expect(response.id).to.equal(pm.collectionVariables.get('commentId'));",
                  "    pm.expect(response.authorId).to.equal(pm.collectionVariables.get('userId'));",
                  "    pm.expect(response.message).to.equal('Обновленный комментарий');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "comments", "{{commentId}}"]
            },
            "description": "Обновление комментария. Пользователь должен быть автором."
          },
          "response": []
        },
        {
          "name": "Удалить комментарий (Приватный)",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        const comment = await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Удаляемый комментарий' });",
                  "        pm.collectionVariables.set('userId', user.id);",
                  "        pm.collectionVariables.set('commentId', comment.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "    pm.response.to.not.have.body;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/comments/{{commentId}}",
              "host": ["{{baseUrl}}"],
              "path": ["users", "{{userId}}", "comments", "{{commentId}}"]
            },
            "description": "Удаление комментария пользователем. Пользователь должен быть автором."
          },
          "response": []
        }
      ]
    },
    {
      "name": "Публичные комментарии",
      "item": [
        {
          "name": "Получить комментарии события",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {",
                  "    const api = new API(pm);",
                  "    const rnd = new RandomUtils();",
                  "    try {",
                  "        const user = await api.addUser(rnd.getUser());",
                  "        const category = await api.addCategory(rnd.getCategory());",
                  "        const event = await api.addEvent(user.id, rnd.getEvent(category.id));",
                  "        await api.publishEvent(event.id);",
                  "        await api.post(`/users/${user.id}/comments/${event.id}`, { message: 'Публичный комментарий' });",
                  "        pm.collectionVariables.set('eventId', event.id);",
                  "    } catch (err) {",
                  "        console.error('Ошибка при подготовке данных:', err);",
                  "    }",
                  "};",
                  "",
                  "const interval = setInterval(() => {}, 1000);",
                  "",
                  "setTimeout(async () => {",
                  "    try {",
                  "        await main();",
                  "    } catch (e) {",
                  "        console.error(e);",
                  "    } finally {",
                  "        clearInterval(interval);",
                  "    }",
                  "}, 100);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Ответ должен содержать код статуса 200 и данные в формате JSON', function () {",
                  "    pm.response.to.have.status(200);",
                  "    pm.response.to.be.withBody;",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "const response = pm.response.json();",
                  "",
                  "pm.test('Ответ должен быть массивом', function () {",
                  "    pm.expect(response).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Каждый комментарий должен содержать нужные поля', function () {",
                  "    response.forEach(comment => {",
                  "        pm.expect(comment).to.have.property('id');",
                  "        pm.expect(comment).to.have.property('authorId');",
                  "        pm.expect(comment).to.have.property('eventId');",
                  "        pm.expect(comment).to.have.property('created');",
                  "        pm.expect(comment).to.have.property('message');",
                  "    });",
                  "});",
                  "",
                  "pm.test('Данные должны включать созданный комментарий', function () {",
                  "    const comment = response.find(c => c.message === 'Публичный комментарий');",
                  "    pm.expect(comment).to.exist;",
                  "    pm.expect(comment.eventId).to.equal(pm.collectionVariables.get('eventId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/comments/{{eventId}}?from=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["comments", "{{eventId}}"],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            },
            "description": "Получение всех комментариев события публично."
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошибка:\\n\", err,",
          "                            \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                            \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0) {",
          "                        reject(new Error('Отправлено пустое тело ответа'));",
          "                    } else {",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string"
    }
  ]
}